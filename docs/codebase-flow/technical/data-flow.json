{
  "description": "Complete data flow paths through the Do It (Later) application",
  "version": "1.17.0",
  "data_structures": {
    "Task": {
      "properties": {
        "id": {
          "type": "string",
          "source": "Utils.generateId()",
          "description": "Unique identifier (timestamp + random)"
        },
        "text": {
          "type": "string",
          "source": "user input",
          "validation": ["maxLength: 200", "escapeHtml"],
          "description": "Task description"
        },
        "list": {
          "type": "string",
          "enum": ["today", "tomorrow"],
          "description": "Which list the task belongs to"
        },
        "completed": {
          "type": "boolean",
          "default": false,
          "description": "Task completion status"
        },
        "important": {
          "type": "boolean",
          "default": false,
          "description": "Task importance flag"
        },
        "subtasks": {
          "type": "array",
          "items": "Task",
          "default": [],
          "description": "Child tasks"
        },
        "deadline": {
          "type": "string | null",
          "format": "ISO date",
          "default": null,
          "description": "Due date for the task"
        },
        "parentId": {
          "type": "string | null",
          "default": null,
          "description": "Parent task ID for subtasks"
        }
      }
    },
    "AppData": {
      "properties": {
        "tasks": {
          "type": "array",
          "items": "Task",
          "description": "All tasks in the application"
        },
        "lastUpdated": {
          "type": "number",
          "format": "timestamp",
          "description": "Last modification timestamp"
        },
        "currentDate": {
          "type": "string",
          "format": "YYYY-MM-DD",
          "description": "Current date for rollover tracking"
        },
        "totalCompleted": {
          "type": "number",
          "default": 0,
          "description": "Lifetime completed tasks counter"
        },
        "version": {
          "type": "number",
          "current": 2,
          "description": "Data structure version"
        }
      }
    }
  },
  "flows": {
    "add_task": {
      "name": "Add New Task",
      "trigger": "User presses Enter in input field",
      "path": [
        {
          "step": 1,
          "component": "DOM",
          "action": "keydown event",
          "data": "input text"
        },
        {
          "step": 2,
          "component": "app.bindEvents",
          "action": "check Enter key",
          "data": "event.key === 'Enter'"
        },
        {
          "step": 3,
          "component": "app.addTask",
          "action": "validate input",
          "data": "text, listName"
        },
        {
          "step": 4,
          "component": "taskManager.addTask",
          "action": "create task object",
          "data": "{ id, text, list, completed: false, important: false, subtasks: [], deadline: null }"
        },
        {
          "step": 5,
          "component": "taskManager.addTaskToList",
          "action": "add to data.tasks array",
          "data": "data.tasks.push(task)"
        },
        {
          "step": 6,
          "component": "app.saveData",
          "action": "debounce save (100ms)",
          "data": "app.data"
        },
        {
          "step": 7,
          "component": "Storage.save",
          "action": "write to localStorage",
          "data": "JSON.stringify(app.data)"
        },
        {
          "step": 8,
          "component": "app.render",
          "action": "debounce render (16ms)",
          "data": "app.data.tasks"
        },
        {
          "step": 9,
          "component": "renderer.render",
          "action": "update DOM",
          "data": "filtered tasks by list"
        }
      ],
      "data_transformations": [
        "user input (string) → validated text",
        "text + listName → Task object",
        "Task object → data.tasks array",
        "app.data → JSON string",
        "JSON string → localStorage",
        "data.tasks → filtered lists",
        "filtered lists → DOM elements"
      ]
    },
    "toggle_task": {
      "name": "Toggle Task Completion",
      "trigger": "User clicks checkbox",
      "path": [
        {
          "step": 1,
          "component": "DOM",
          "action": "checkbox click",
          "data": "task ID from data-task-id"
        },
        {
          "step": 2,
          "component": "app.toggleTask",
          "action": "call with task ID",
          "data": "taskId"
        },
        {
          "step": 3,
          "component": "taskManager.toggleTask",
          "action": "find task by ID",
          "data": "taskManager.findTaskById(id)"
        },
        {
          "step": 4,
          "component": "taskManager.toggleTask",
          "action": "flip completed flag",
          "data": "task.completed = !task.completed"
        },
        {
          "step": 5,
          "component": "app.toggleTask",
          "action": "increment counter if completed",
          "data": "data.totalCompleted++"
        },
        {
          "step": 6,
          "component": "app.saveData",
          "action": "persist changes",
          "data": "app.data"
        },
        {
          "step": 7,
          "component": "app.render",
          "action": "update UI",
          "data": "app.data.tasks"
        },
        {
          "step": 8,
          "component": "app.updateCompletedCounter",
          "action": "update counter display",
          "data": "data.totalCompleted"
        }
      ],
      "data_transformations": [
        "click event → task ID",
        "task ID → task object",
        "task.completed = false → task.completed = true (or vice versa)",
        "completion → totalCompleted increment",
        "modified task → saved to localStorage",
        "task state → DOM class changes (completed class)"
      ]
    },
    "move_task": {
      "name": "Move Task Between Lists",
      "trigger": "Swipe gesture or move button click",
      "path": [
        {
          "step": 1,
          "component": "DOM/Gesture",
          "action": "swipe or button click",
          "data": "task ID, direction"
        },
        {
          "step": 2,
          "component": "app.moveTask",
          "action": "determine target list",
          "data": "taskId, toList"
        },
        {
          "step": 3,
          "component": "taskManager.moveTaskToList",
          "action": "update task.list property",
          "data": "task.list = 'today' | 'tomorrow'"
        },
        {
          "step": 4,
          "component": "app.moveTask",
          "action": "add animation classes",
          "data": "CSS classes for animation"
        },
        {
          "step": 5,
          "component": "app.saveData",
          "action": "persist change",
          "data": "app.data"
        },
        {
          "step": 6,
          "component": "app.render",
          "action": "re-render both lists",
          "data": "app.data.tasks"
        }
      ],
      "data_transformations": [
        "gesture → task ID + direction",
        "direction → target list name",
        "task.list = 'today' → task.list = 'tomorrow' (or vice versa)",
        "task position in array → same (only list property changes)",
        "list change → DOM list transfer with animation"
      ]
    },
    "import_data": {
      "name": "Import Tasks from External Source",
      "trigger": "File upload, clipboard paste, or QR scan",
      "path": [
        {
          "step": 1,
          "component": "Import Source",
          "action": "receive data",
          "data": "compressed string"
        },
        {
          "step": 2,
          "component": "importExportManager",
          "action": "read data",
          "data": "file content / clipboard text / QR data"
        },
        {
          "step": 3,
          "component": "Sync.decompress",
          "action": "parse compressed format",
          "data": "T:task1|task2~L:task3~C:42"
        },
        {
          "step": 4,
          "component": "Sync.decompress",
          "action": "convert to task objects",
          "data": "array of Task objects"
        },
        {
          "step": 5,
          "component": "importExportManager.mergeTasks",
          "action": "merge with existing tasks",
          "data": "existing tasks + imported tasks"
        },
        {
          "step": 6,
          "component": "Storage.save",
          "action": "save merged data",
          "data": "updated app.data"
        },
        {
          "step": 7,
          "component": "app.render",
          "action": "display all tasks",
          "data": "merged task list"
        }
      ],
      "data_transformations": [
        "file/clipboard/QR → compressed string",
        "compressed string → parsed sections (T:, L:, C:)",
        "T: section → today tasks array",
        "L: section → tomorrow tasks array",
        "parsed arrays → Task objects with IDs",
        "imported tasks → merged with existing",
        "merged data → localStorage → DOM"
      ]
    },
    "export_data": {
      "name": "Export Tasks to External Format",
      "trigger": "Export button click (file/clipboard/QR)",
      "path": [
        {
          "step": 1,
          "component": "Export Button",
          "action": "click export option",
          "data": "export type"
        },
        {
          "step": 2,
          "component": "importExportManager",
          "action": "get current data",
          "data": "app.data"
        },
        {
          "step": 3,
          "component": "Sync.compress",
          "action": "convert to export format",
          "data": "app.data.tasks → compressed string"
        },
        {
          "step": 4,
          "component": "Export Handler",
          "action": "output to chosen destination",
          "data": "file download / clipboard / QR image"
        }
      ],
      "data_transformations": [
        "app.data.tasks → filtered by list (today/tomorrow)",
        "tasks → text strings with ! prefix for important",
        "text strings → joined with | delimiter",
        "sections → joined with ~ delimiter",
        "completed count → C:42 format",
        "final string → file/clipboard/QR code"
      ]
    },
    "date_rollover": {
      "name": "Daily Date Rollover Processing",
      "trigger": "App init with date change detected",
      "path": [
        {
          "step": 1,
          "component": "app.checkDateRollover",
          "action": "compare dates",
          "data": "data.currentDate !== today"
        },
        {
          "step": 2,
          "component": "app.checkDateRollover",
          "action": "filter completed tasks",
          "data": "tasks.filter(t => t.completed)"
        },
        {
          "step": 3,
          "component": "app.checkDateRollover",
          "action": "remove old completed (age > 7 days)",
          "data": "tasks = tasks.filter(old logic)"
        },
        {
          "step": 4,
          "component": "app.checkDateRollover",
          "action": "check deadlines",
          "data": "tasks with deadline property"
        },
        {
          "step": 5,
          "component": "app.checkDateRollover",
          "action": "move today's deadline tasks to today",
          "data": "task.list = 'today' if deadline = today"
        },
        {
          "step": 6,
          "component": "app.checkDateRollover",
          "action": "mark important if deadline soon",
          "data": "task.important = true if deadline <= 3 days"
        },
        {
          "step": 7,
          "component": "app.checkDateRollover",
          "action": "update current date",
          "data": "data.currentDate = today"
        },
        {
          "step": 8,
          "component": "app.saveData",
          "action": "persist changes",
          "data": "modified app.data"
        },
        {
          "step": 9,
          "component": "app.render",
          "action": "update display",
          "data": "cleaned task lists"
        }
      ],
      "data_transformations": [
        "old date → new date",
        "completed tasks → filtered by age",
        "deadline tasks → moved to today list",
        "near-deadline tasks → marked important",
        "task counts → notification message",
        "cleaned data → saved to localStorage"
      ]
    }
  },
  "persistence": {
    "storage_key": "do-it-later-data",
    "format": "JSON string",
    "location": "localStorage",
    "debounce_delay": "100ms",
    "operations": {
      "load": {
        "trigger": "app constructor",
        "source": "localStorage",
        "fallback": "Storage.getDefaultData()",
        "migration": "Storage.migrateData() if v1"
      },
      "save": {
        "trigger": "any data change",
        "debounced": true,
        "target": "localStorage",
        "error_handling": "console.error + return false"
      }
    }
  },
  "validation_points": [
    {
      "location": "Input field",
      "checks": ["maxlength=200", "trim whitespace", "non-empty"]
    },
    {
      "location": "TaskManager.addTask",
      "checks": ["Utils.escapeHtml", "text validation"]
    },
    {
      "location": "Storage.load",
      "checks": ["JSON parse try/catch", "version check", "migration if needed"]
    },
    {
      "location": "Import",
      "checks": ["format validation", "task structure validation", "HTML escaping"]
    }
  ],
  "data_lifecycle": {
    "states": ["created", "active", "completed", "archived", "deleted"],
    "transitions": {
      "created → active": "Task added to list",
      "active → completed": "Checkbox toggled",
      "completed → active": "Checkbox untoggled",
      "completed → archived": "Date rollover (stays in array)",
      "archived → deleted": "Age > 7 days on rollover"
    }
  }
}